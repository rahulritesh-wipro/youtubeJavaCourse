*Learning Approach*

As in all other coputer languages the elements of java do not exist in isolation.
They work together to form the language as a whole.
This interrelatedness can make it difficult to describe one aspect of java without involving several others i.e. to understand one feature of java require 
prior knowlwedge of other feature.


*Understanding Object Oriented Programming*
OOP is at the core of java.
All java programs are to at least some extent object oriented.
OOP is so integral to java that it is best to uncerstand OOP basic principles before we begin writing even simple java program.
So let's begin with theoretical aspect of OOP.


*Two Paradigms*
All computer programs consist two elements - 
> code
>data

A program can be conceptually organized around its code or around its data. 
i.e. some programs are written around "What is happening" - code
some programs are written around "who is being affected" - data

These are the two paradigms that govern how a program is constructed.

Programs written around code/what is happening is called process-oriented Model.
Programs written around data/who is being affected is called object oriented Model.

*Process oriented programming*
1. Programs written around code/what is happening
2. characterizes a program as a series of linear steps (code), i.e code acting on data.
3. example - C language
4. Problems with this approach arises as program grows larger and more complex.

To manage the increasing complexity, the second approach (programs written around data) came in picture Object Oriented model/programming.

*Object Oriented programming*
1. Organizes a program around its data i.e. Objects and a set of well defined interfaces to that data.
2. An Object Oriented program can be characterized as "data controlling access to code"
3. by switching the controlling entity to data, you can achieve several organizational benefits.

*Abstraction*
1. Abstraction is very essential in Object Oriented programming
2. Humans manage complexity through Abstraction.
3. example- people do not think of a car as a set of tens of thousands of individual parts.
They think of it as a well defined object with its own unique behavior. This abstraction allows people to use a car to drive 
to the grocery store without being overwhelmed by the complexity of the individual parts. They can ignore the details of how the engine,
transmission, and braking systems work.Instead, they are free to utilize the object as whole.

In terms of programming-
A powerful way to manage Abtraction is through the use of hierarchical classifications. This allows you to layer the semantics of the complex
systems, breaking them into more manageable pieces. example - from outside car is a single object, once inside, you see that the car consists
of several subsystems like steering, brakes, sound system, seat belts, heating, cellular phone and so on.

In turn each of these subsystems is made up of more specialized units. For example - / instance the system you interact with your car's 
dashboard controls may consist of a media system, navigation interface and vehicle monitoring display. The point is that you manage the 
complexity of a car or (any other complex system) through the use of hierarchical abstractions.

Hierarchical abstractions of complex systems can also be applied to computer programs.
The data from a traditional process oriented program can transformed by abstraction into its component objects.
A sequence of process steps can become a collection of messages between these objects. Thus, each of these objects describes its own 
unique behavior. You can treat these objects as concrete entities that respond to messages telling them t do something. This is the 
essence of object oriented programming.































