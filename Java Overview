*Learning Approach*

As in all other coputer languages the elements of java do not exist in isolation.
They work together to form the language as a whole.
This interrelatedness can make it difficult to describe one aspect of java without involving several others i.e. to understand one feature of java require 
prior knowlwedge of other feature.


*Understanding Object Oriented Programming*
OOP is at the core of java.
All java programs are to at least some extent object oriented.
OOP is so integral to java that it is best to uncerstand OOP basic principles before we begin writing even simple java program.
So let's begin with theoretical aspect of OOP.


*Two Paradigms*
All computer programs consist two elements - 
> code
>data

A program can be conceptually organized around its code or around its data. 
i.e. some programs are written around "What is happening" - code
some programs are written around "who is being affected" - data

These are the two paradigms that govern how a program is constructed.

Programs written around code/what is happening is called process-oriented Model.
Programs written around data/who is being affected is called object oriented Model.

*Process oriented programming*
1. Programs written around code/what is happening
2. characterizes a program as a series of linear steps (code), i.e code acting on data.
3. example - C language
4. Problems with this approach arises as program grows larger and more complex.

To manage the increasing complexity, the second approach (programs written around data) came in picture Object Oriented model/programming.

*Object Oriented programming*
1. Organizes a program around its data i.e. Objects and a set of well defined interfaces to that data.
2. An Object Oriented program can be characterized as "data controlling access to code"
3. by switching the controlling entity to data, you can achieve several organizational benefits.

*Abstraction*
1. Abstraction is very essential in Object Oriented programming
2. Humans manage complexity through Abstraction.
3. example- people do not think of a car as a set of tens of thousands of individual parts.
They think of it as a well defined object with its own unique behavior. This abstraction allows people to use a car to drive 
to the grocery store without being overwhelmed by the complexity of the individual parts. They can ignore the details of how the engine,
transmission, and braking systems work.Instead, they are free to utilize the object as whole.

In terms of programming-
A powerful way to manage Abtraction is through the use of hierarchical classifications. This allows you to layer the semantics of the complex
systems, breaking them into more manageable pieces. example - from outside car is a single object, once inside, you see that the car consists
of several subsystems like steering, brakes, sound system, seat belts, heating, cellular phone and so on.

In turn each of these subsystems is made up of more specialized units. For example - / instance the system you interact with your car's 
dashboard controls may consist of a media system, navigation interface and vehicle monitoring display. The point is that you manage the 
complexity of a car or (any other complex system) through the use of hierarchical abstractions.

Hierarchical abstractions of complex systems can also be applied to computer programs.
The data from a traditional process oriented program can transformed by abstraction into its component objects.
A sequence of process steps can become a collection of messages between these objects. Thus, each of these objects describes its own 
unique behavior. You can treat these objects as concrete entities that respond to messages telling them t do something. This is the 
essence of object oriented programming.


it is important to understand how OOP principles or concepts translate into programs.
Once you have well-defined objects and clean,reliable interfacesto those objects, you can gracefully decommission or replace parts
of an older system without fear. ex- replacing faulty or old parts of a car.



*The Three OOP Principles*
All OOP language provides mechanisms that help you implement the object oriented model- they are
1. Encapsulation
2. Inheritance
3. Polymorphism



*Ecapsulation*
Encapsulation is the mechanism that binds together code and the data it manipulates, and it keeps both safe from outside interference and 
misuse.

It is like a protective wrapper that prevents the code and data from being arbitrarily accessed by other code defined outside the wrapper.
Access to the code and data inside the wrapper is tightly controlled through a well-defined interface.

example - car - gear shift is responsible to increase the car speed, you as a user has only one method of affecting this complex encapsulation
-speed by moving the gear shift lever. You can't affect the car speed by using indicator lever or windshield wipers. Thus gear-shift lever is a
well defined (indeed-unique) interface to the transmission. Also what occurs inside the transmission doesn't affect objects outside the 
transmission. for example shifting gears doesn't turn on the headlights! because transmission is encapsulated, dozens of car manufacturers
can implement transmission in their own way, however from driver's perspective they all work the same.

This same idea can be applied to programming, the power of encapsulated code is that everyone knows how to access it and thus can use it
regardless of the implementation details - without fear of unexpected side effects.

The basis of encapsulation is class.
A class defines the structure and behavior (data and code) that will be shared by a set of objects.
Each object of a given class contains the structure and behavior defined by the class as if it were stamped out by a mold in the shape of 
the class for this reason objects are sometimes reffered to as instances of a class.

Thus a class is a logical construct whereas an object has the physical reality. 
when you create a class, you will specify the code and data that constitute that class. 
collectively, these elements are called members of the class.
specifically the data defined by the class are referred to as member variables or instance variables.
the code that operates on that data is referred to as member methods or just methods.

In properly written java programs, the methods define how the member variables can be used. Tthis means that the behavior and interface
of a class are defined by the methods that operate on its instance data.

Since the purpose of a class is to encapsulate complexity, there are mechanisms for hiding the complexity of the implementation inside the 
class. Each method or variable in a class may be marked as private or public.

The public interface of a class represents everything that external users of a class need to know.
The private methods and data can only be accessed by code that is a member of the class. Therefore any other code that is not a member of a class
cannot access a private method or variable.

since the private members of a class may only be accessed by other parts of your program through the class's public methods, you can ensure
security i.e. no improper actions take place. That means public interface should be carefully designed not to expose too much of the inner
workings of the class.


*Inheritance*
Inhertance is the process by which one object acquires the properties of another object.
This is important because it supports the concept of hierarchical classification.

Top down approach - hierarchical classification.
without the use of hierarchies, each object would need to define all of its characteristics explicitly.
However, by use of Inheritance, an object need only define those qualities that make it unique within a class.(class -Mammal, Animal, Dog..)
An object can inherit its general attributes from its parent.

This it is the Inheritance mechanism that makes it possible for one object to be a specific instance of a more general case.

Example - Most people naturally view the world as made up of objects that are related to each other in a hierarchical way
Animals
Mammals
Dogs

Animal in abstract way
attributes - size, intelligence and type of skeletal system
behavioral aspect - eat, breathe, sleep

this description of attributes and behavior is the class definition for Animals.


If you want to describe a more specific class of Animals such as Mammals, they would have more specific attributes,such as -
attributes - type of teeth, mammary glands

Animal - superclass
Mammal - subclass

Since Mammals (subclass) are simple more precisely Animals (superclass) they inherit all of the attributes from Animals (superclass).
Note - A deeply inherit subclass inherits all if the attributes from each of its Ancestors in the class hierarchy.

Inheritance interacts with Encapsulation as well. If a given class Encapsulates some attributes, then any subclass will have the same 
attributes plus its own specific attributes. A new subclass inherits all of its attributes of all of its Ancestors.

*Polymorphism*
Polymorphism is a feature that allows one interface to be used for a general class of actions.
The specific action is determined by the exact nature of the situation.
Example - 



 


































